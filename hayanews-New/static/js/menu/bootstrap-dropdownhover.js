/*!
 * Dropdownhover v1.0.0 (http://bs-dropdownhover.kybarg.com)
 */
+function (e) { var d = function (g, f) { this.options = f; this.$element = e(g); var h = this; this.dropdowns = this.$element.hasClass("dropdown-toggle") ? this.$element.parent().find(".dropdown-menu").parent(".dropdown") : this.$element.find(".dropdown"); this.dropdowns.each(function () { e(this).on("mouseenter.bs.dropdownhover", function (i) { h.show(e(this).children("a, button")) }) }); this.dropdowns.each(function () { e(this).on("mouseleave.bs.dropdownhover", function (i) { h.hide(e(this).children("a, button")) }) }) }; d.TRANSITION_DURATION = 300; d.DELAY = 150; d.TIMEOUT; d.DEFAULTS = { animations: ["fadeInDown", "fadeInRight", "fadeInUp", "fadeInLeft"], }; d.prototype.show = function (n) { var k = e(n); window.clearTimeout(d.TIMEOUT); e(".dropdown").not(k.parents()).each(function () { e(this).removeClass("open") }); var m = this.options.animations[0]; if (k.is(".disabled, :disabled")) { return } var f = k.parent(); var l = f.hasClass("open"); if (!l) { var h = k.next(".dropdown-menu"); var j = { relatedTarget: this }; f.addClass("open"); var i = this.position(h); i == "top" ? m = this.options.animations[2] : i == "right" ? m = this.options.animations[3] : i == "left" ? m = this.options.animations[1] : m = this.options.animations[0]; h.addClass("animated " + m); var g = e.support.transition && h.hasClass("animated"); g ? h.one("bsTransitionEnd", function () { h.removeClass("animated " + m) }).emulateTransitionEnd(d.TRANSITION_DURATION) : h.removeClass("animated " + m) } return false }; d.prototype.hide = function (f) { var g = this; var i = e(f); var h = i.parent(); d.TIMEOUT = window.setTimeout(function () { h.removeClass("open") }, d.DELAY) }; d.prototype.position = function (n) { var j = e(window); n.css({ bottom: "", left: "", top: "", right: "" }).removeClass("dropdownhover-top"); var k = { top: j.scrollTop(), left: j.scrollLeft() }; k.right = k.left + j.width(); k.bottom = k.top + j.height(); var f = n.offset(); f.right = f.left + n.outerWidth(); f.bottom = f.top + n.outerHeight(); var i = n.position(); i.right = f.left + n.outerWidth(); i.bottom = f.top + n.outerHeight(); var l = ""; var h = n.parents(".dropdown-menu").length; if (h) { if (i.left < 0) { l = "left"; n.removeClass("dropdownhover-right").addClass("dropdownhover-left") } else { l = "right"; n.addClass("dropdownhover-right").removeClass("dropdownhover-left") } if (f.left < k.left) { l = "right"; n.css({ left: "100%", right: "auto" }).addClass("dropdownhover-right").removeClass("dropdownhover-left") } else { if (f.right > k.right) { l = "left"; n.css({ left: "auto", right: "100%" }).removeClass("dropdownhover-right").addClass("dropdownhover-left") } } if (f.bottom > k.bottom) { n.css({ bottom: "auto", top: -(f.bottom - k.bottom) }) } else { if (f.top < k.top) { n.css({ bottom: -(k.top - f.top), top: "auto" }) } } } else { var g = n.parent(".dropdown"); var m = g.offset(); m.right = m.left + g.outerWidth(); m.bottom = m.top + g.outerHeight(); if (f.right > k.right) { n.css({ left: -(f.right - k.right), right: "auto" }) } if (f.bottom > k.bottom && (m.top - k.top) > (k.bottom - m.bottom) || n.position().top < 0) { l = "top"; n.css({ bottom: "100%", top: "auto" }).addClass("dropdownhover-top").removeClass("dropdownhover-bottom") } else { l = "bottom"; n.addClass("dropdownhover-bottom") } } return l }; function c(f) { return this.each(function () { var j = e(this); var i = j.data("bs.dropdownhover"); var h = j.data(); if (j.data("animations") !== undefined && j.data("animations") !== null) { h.animations = e.isArray(h.animations) ? h.animations : h.animations.split(" ") } var g = e.extend({}, d.DEFAULTS, h, typeof f == "object" && f); if (!i) { j.data("bs.dropdownhover", (i = new d(this, g))) } }) } var b = e.fn.dropdownhover; e.fn.dropdownhover = c; e.fn.dropdownhover.Constructor = d; e.fn.dropdownhover.noConflict = function () { e.fn.dropdownhover = b; return this }; var a; e(document).ready(function () { if (e(window).width() >= 768) { e('[data-hover="dropdown"]').each(function () { var f = e(this); c.call(f, f.data()) }) } }); e(window).on("resize", function () { clearTimeout(a); a = setTimeout(function () { if (e(window).width() >= 768) { e('[data-hover="dropdown"]').each(function () { var f = e(this); c.call(f, f.data()) }) } else { e('[data-hover="dropdown"]').each(function () { e(this).removeData("bs.dropdownhover"); if (e(this).hasClass("dropdown-toggle")) { e(this).parent(".dropdown").find(".dropdown").andSelf().off("mouseenter.bs.dropdownhover mouseleave.bs.dropdownhover") } else { e(this).find(".dropdown").off("mouseenter.bs.dropdownhover mouseleave.bs.dropdownhover") } }) } }, 200) }) }(jQuery);